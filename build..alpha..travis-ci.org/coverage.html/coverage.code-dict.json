{"/home/travis/build/npmtest/node-npmtest-mongoui/test.js":"/* istanbul instrument in package npmtest_mongoui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoui/lib.npmtest_mongoui.js":"/* istanbul instrument in package npmtest_mongoui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongoui = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongoui = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoui/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongoui && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongoui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongoui\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongoui.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mongoui.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongoui.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mongoui.__dirname +\n                    '/lib.npmtest_mongoui.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoui/node_modules/mongoui/index.js":"#!/usr/bin/env node\n\"use strict\"\n\nlet port = require('./package.json').mongoui.apiPort \nlet log = console.log\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst compression = require('compression')\nconst expressHandlebars = require('express-handlebars')\nconst errorHandler = require('errorhandler')\nconst cors = require('cors')\n\nconst favicon = require('serve-favicon')\nconst path = require('path')\n\nlet config = require('./config.json')\nlet mongoDb = require('mongodb')\nlet mongoskin = require('mongoskin')\nlet OId = require('mongoskin').ObjectId\n\nlet dbHostName, dbPortNumber, dbName\nif (config && config.database) {\n  dbHostName = config.database.default.host\n  dbPortNumber = config.database.default.port\n  dbName = config.database.default.name\n} else {\n  dbHostName = 'localhost'\n  dbPortNumber = 27017\n  dbName = 'mongoui'\n}\n\nvar app = express()\napp.use(favicon(path.join(__dirname, 'public', 'img', 'favicons', 'favicon.ico')))\napp.use(errorHandler())\napp.use(cors({credential: false}))\napp.use(bodyParser.json())\napp.use(express.static(path.join(__dirname,'public')))\n\napp.use(compression())\n\napp.get('/api/dbs', function(req, res) {\n  if (!req.admin) req.admin = mongoskin.db(`mongodb://${dbHostName}:${dbPortNumber}/${dbName}`).admin()\n  req.admin.listDatabases(function(error, dbs) {\n    res.json(dbs)\n  })\n})\n\napp.param('dbName', function(req, res, next, dbName){\n  var db = mongoskin.db(`mongodb://${dbHostName}:${dbPortNumber}/${dbName}`)\n  req.db = db\n  req.admin = db.admin()\n  return next()\n})\napp.param('collectionName', function(req, res, next, collectionName){\n  req.collection = req.db.collection(collectionName)\n  return next()\n})\n\n\napp.get('/api/dbs/:dbName/collections', function(req, res, next) {\n  req.db.collections(function(e, names) {\n    if (!names) next(new Error('No collections'))\n    let collections = names.map((collection)=>{\n      log(collection.s.name)\n      return {name: collection.s.name}\n    })\n    res.json({collections: collections})\n  })\n})\n\napp.get('/api/dbs/:dbName/collections/:collectionName', function(req, res, next) {\n  let query = {}\n  try {\n    query = JSON.parse(req.query.query)\n    //recognize and convert any regex queries from strings into regex objects\n    for (var prop in query){\n      if ((query[prop][0] == \"R\" && query[prop][1] == \"/\") //arbitrary letter 'R' used by this app\n        && (query[prop].length > 3)   //avoids a few corner cases\n        && ((query[prop][(query[prop].length - 1) ] == \"/\" ) || (query[prop][(query[prop].length - 2)] == \"/\") || (query[prop][query[prop].length - 3 ] == \"/\" )|| (query[prop][query[prop].length - 4 ] == \"/\"  ))\n      ){\n        var splitRegex = query[prop].split(\"/\")\n        var makeRegex = new RegExp( splitRegex[1], splitRegex[2])\n        query[prop] = makeRegex\n      }\n    }\n  } catch (error) {\n    return next(new Error('Invalid query, cannot parse it'))\n  }\n  if (query._id) {\n    if (query._id['$in'] && Array.isArray(query._id.$in)) {\n      query._id.$in = query._id.$in.map((id)=>{\n        return OId(id)\n      })\n    } else query._id = OId(query._id)\n  }\n  req.collection.find(query || {}, {limit: req.query.limit || 20}).toArray(function(e, docs) {\n    console.log('boo', docs, query)\n    res.json({docs: docs})\n  })\n})\n\napp.post('/api/dbs/:dbName/collections/:collectionName', function(req, res) {\n  delete req.body._id\n  req.collection.insert(req.body, function(e, results) {\n    // console.log('boo', e, results)\n    res.json(results)\n  })\n})\n\napp.delete('/api/dbs/:dbName/collections/:collectionName/:id', function(req, res) {\n  if (req.body._id && req.body._id != req.params.id) return res.status(400).json({error: 'ID in the body is not matching ID in the URL'})\n  delete req.body._id\n  req.collection.remove({ _id: mongoDb.ObjectId(req.params.id)}, function(e, results) {\n    res.json(results)\n  })\n})\n\napp.patch('/api/dbs/:dbName/collections/:collectionName/:id', function(req, res) {\n  if (req.body._id && req.body._id != req.params.id) return res.status(400).json({error: 'ID in the body is not matching ID in the URL'})\n  delete req.body._id\n  req.collection.updateById(req.params.id, {$set: req.body}, function(e, results) {\n    // console.log('boo', e, results)\n    res.json(results)\n  })\n})\n\n\nif (require.main === module) {\n  app.listen(port, function(){\n    console.log('mongoui is listening on: %s', port);\n  });\n} else {\n  module.exports = app\n}\n","/home/travis/build/npmtest/node-npmtest-mongoui/node_modules/mongoui/dev-server.js":"var webpack = require('webpack')\nvar WebpackDevServer = require('webpack-dev-server')\nvar config = require('./webpack.config')\n\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  contentBase: 'public',\n  inline: true,\n  stats: { colors: true }\n}).listen(3000, 'localhost', function (err, result) {\n  if (err) {\n    return console.log(err)\n  }\n\n  console.log('Listening at http://localhost:3000/')\n})\n","/home/travis/build/npmtest/node-npmtest-mongoui/node_modules/mongoui/webpack.config.js":"var path = require('path')\nvar webpack = require('webpack')\nmodule.exports = {\n  entry: [\n    'webpack-dev-server/client?http://0.0.0.0:3000', // WebpackDevServer host and port\n    'webpack/hot/only-dev-server', // 'only' prevents reload on syntax errors\n    './source/app.jsx'\n  ],\n  output: {\n    path: path.join(__dirname, 'public/js'),\n    filename: 'bundle.js',\n    publicPath: '/js/'\n  },\n  devtool: '#cheap-eval-source-map',\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /(node_modules|public)/,\n        loaders: [\n          'react-hot',\n          'babel'\n        ]\n      },\n      { test: /\\.json$/, loader: 'json-loader'},\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" }\n    ],\n    noParse: [\n      /node_modules\\/json-schema\\/lib\\/validate\\.js/,\n      /node_modules\\\\json-schema\\\\lib\\\\validate\\.js/\n    ]\n  },\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    console: false,\n    'coffee-script': 'mock'\n  },\n  amd: { jQuery: true },\n\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin()\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-mongoui/node_modules/mongoui/webpack.start.config.js":"var path = require('path')\nvar webpack = require('webpack')\nmodule.exports = {\n  entry: [\n    './source/app.jsx'\n  ],\n  output: {\n    path: path.join(__dirname, 'public/js'),\n    filename: 'bundle.js',\n    publicPath: '/js/'\n  },\n  devtool: '#cheap-eval-source-map',\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /(node_modules|public)/,\n        loaders: [\n          'react-hot',\n          'babel'\n        ]\n      },\n      { test: /\\.json$/, loader: 'json-loader'},\n      { test: /\\.css$/, loader: \"style-loader!css-loader\" }\n    ],\n    noParse: [\n      /node_modules\\/json-schema\\/lib\\/validate\\.js/,\n      /node_modules\\\\json-schema\\\\lib\\\\validate\\.js/\n    ]\n  },\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    console: false,\n    'coffee-script': 'mock'\n  },\n  amd: { jQuery: true }\n\n}\n"}